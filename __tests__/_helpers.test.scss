@use "sass-true" as *;
@use "../helpers" as helpers;
@use "./test-helpers" as testHelpers;

@include describe("_helpers.scss") {
  @include it("can-value-be-falsy() returns true, if given value is falsy") {
    @include assert-equal(helpers.can-value-be-falsy(false), true);
    @include assert-equal(helpers.can-value-be-falsy(""), true);
    @include assert-equal(helpers.can-value-be-falsy(null), true);
    @include assert-equal(helpers.can-value-be-falsy(0), true);

    /// non-falsy:
    @include assert-equal(helpers.can-value-be-falsy(1), false);
    @include assert-equal(helpers.can-value-be-falsy(" "), false);
    @include assert-equal(helpers.can-value-be-falsy(()), false);
    @include assert-equal(helpers.can-value-be-falsy([]), false);
    @include assert-equal(helpers.can-value-be-falsy(true), false);
    @include assert-equal(helpers.can-value-be-falsy(notquoted), false);
  }

  @include it("can-value-be-truthy() returns true, if given value is truthy") {
    @include assert-equal(helpers.can-value-be-truthy(1), true);
    @include assert-equal(helpers.can-value-be-truthy(" "), true);
    @include assert-equal(helpers.can-value-be-truthy(()), true);
    @include assert-equal(helpers.can-value-be-truthy([]), true);
    @include assert-equal(helpers.can-value-be-truthy(true), true);
    @include assert-equal(helpers.can-value-be-truthy(notquoted), true);

    //// non-truthy:
    @include assert-equal(helpers.can-value-be-truthy(false), false);
    @include assert-equal(helpers.can-value-be-truthy(""), false);
    @include assert-equal(helpers.can-value-be-truthy(null), false);
    @include assert-equal(helpers.can-value-be-truthy(0), false);
  }

  @include it("pop-list() removes last item from list") {
    /// Using a test helper (diff-list) because the following does not work:
    /// @include assert-equal(helpers.pop-list((1, 2, 3)), list(1, 2));
    /// Error is list-separators do not match
    @include assert-equal(testHelpers.diff-list(helpers.pop-list((1, 2, 3)), (1, 2)), []);
    @include assert-equal(testHelpers.diff-list(helpers.pop-list((1, 2)), (1)), []);
    @include assert-equal(testHelpers.diff-list(helpers.pop-list((1)), ()), []);
    @include assert-equal(testHelpers.diff-list(helpers.pop-list(()), ()), []);
  }

  @include it("replace-list-item() replaces item at given index") {
    @include assert-equal(testHelpers.diff-list(helpers.replace-list-item((1, 2, 3), "a", 1), ("a", 2, 3)), []);
    @include assert-equal(testHelpers.diff-list(helpers.replace-list-item((1, 2, 3), "a", 3), (1, 2, "a")), []);
  }

  @include it("get-last-list-item() returns last item from  a list") {
    @include assert-equal(helpers.get-last-list-item((1, 2, 3)), 3);
    @include assert-equal(helpers.get-last-list-item((1, 2)), 2);
    @include assert-equal(helpers.get-last-list-item((1)), 1);
    @include assert-equal(helpers.get-last-list-item(()), null);
    @include assert-equal(helpers.get-last-list-item(null), null);
  }

  @include it("replace-string() is like string.replace()") {
    @include assert-equal(helpers.replace-string("a-a-b-a", "a", "c"), "c-c-b-c");
    @include assert-equal(helpers.replace-string("a-a-b-a", "x", "c"), "a-a-b-a");
    @include assert-equal(helpers.replace-string("a-a-b-a", "", ""), "a-a-b-a");
  }

  @include it("get-map-value-if-map() value of a key from map if argument is a map") {
    @include assert-equal(
      helpers.get-map-value-if-map(
        (
          "key": "value",
        ),
        "key"
      ),
      "value"
    );
    @include assert-equal(
      helpers.get-map-value-if-map(
        (
          "key": "value",
        ),
        "value"
      ),
      null
    );
    @include assert-equal(
      helpers.get-map-value-if-map(
        (
          "key": "value",
        ),
        ""
      ),
      null
    );
    @include assert-equal(
      helpers.get-map-value-if-map(
        (
          "key": "value",
        ),
        null
      ),
      null
    );
    @include assert-equal(helpers.get-map-value-if-map(("key", "value"), "key"), null);
    @include assert-equal(helpers.get-map-value-if-map(null, "key"), null);
  }

  @include it("get-map-key-with-value() returns first item in map that is not null") {
    @include assert-equal(
      helpers.get-map-key-with-value(
        (
          "null": null,
          "number": 1,
          "string": "string",
          "empty": "",
        )
      ),
      "number"
    );
    @include assert-equal(
      helpers.get-map-key-with-value(
        (
          "null": null,
          "string": "string",
          "number": 1,
          "empty": "",
        )
      ),
      "string"
    );
    @include assert-equal(
      helpers.get-map-key-with-value(
        (
          "null": null,
          "empty": "",
          "string": "string",
          "number": 1,
        )
      ),
      "empty"
    );
    @include assert-equal(
      helpers.get-map-key-with-value(
        (
          "null": null,
        )
      ),
      null
    );
    @include assert-equal(helpers.get-map-key-with-value(()), null);
    @include assert-equal(helpers.get-map-key-with-value(null), null);
  }

  @include it("get-map-data-with-value() returns first data set (key, value) in map that is not null") {
    /// Uses the get-map-key-with-value() under the hood, so not testing all same combibations that function is tested with
    @include assert-equal(
      helpers.get-map-data-with-value(
        (
          "null": null,
          "number": 1,
          "string": "string",
          "empty": "",
        )
      ),
      (
        "key": "number",
        "value": 1,
      )
    );
  }

  @include it('get-arg-map-or-arg-list-as-map() returns arguments as a map or argument "ARGS_MAP"') {
    @include assert-equal(
      helpers.get-arg-map-or-arg-list-as-map($arg1: 1, $arg2: "2", $arg3: null),
      (
        "arg1": 1,
        "arg2": "2",
        "arg3": null,
      )
    );

    $map: (
      "argMap1": 1,
    );

    /// works as named argument
    @include assert-equal(helpers.get-arg-map-or-arg-list-as-map($ARGS_MAP: $map), $map);

    /// works also as positionally placed argument
    @include assert-equal(helpers.get-arg-map-or-arg-list-as-map($map), $map);

    /// if one arg is given, it is assumed its $ARGS_MAP (positionall placed)
    @include assert-equal(helpers.get-arg-map-or-arg-list-as-map(("1")), ("1"));
  }

  @include it("is-value-boolean() returns true, if given value is a boolean") {
    @include assert-equal(helpers.is-value-boolean(false), true);
    @include assert-equal(helpers.is-value-boolean(true), true);

    //// non-truthy:
    @include assert-equal(helpers.is-value-boolean(""), false);
    @include assert-equal(helpers.is-value-boolean(null), false);
    @include assert-equal(helpers.is-value-boolean(0), false);
    @include assert-equal(helpers.is-value-boolean(1), false);
    @include assert-equal(helpers.is-value-boolean(" "), false);
    @include assert-equal(helpers.is-value-boolean(()), false);
    @include assert-equal(helpers.is-value-boolean([]), false);
  }

  @include it("is-value-string() returns true, if given value is a string") {
    @include assert-equal(helpers.is-value-string(notquoted), true);
    @include assert-equal(helpers.is-value-string(""), true);
    @include assert-equal(helpers.is-value-string(" "), true);

    //// non-truthy:
    @include assert-equal(helpers.is-value-string(false), false);
    @include assert-equal(helpers.is-value-string(null), false);
    @include assert-equal(helpers.is-value-string(0), false);
    @include assert-equal(helpers.is-value-string(1), false);
    @include assert-equal(helpers.is-value-string(true), false);
    @include assert-equal(helpers.is-value-string(()), false);
    @include assert-equal(helpers.is-value-string([]), false);
  }

  @include it("is-value-null() returns true, if given value is a null") {
    @include assert-equal(helpers.is-value-null(null), true);

    /// non-truthy:
    @include assert-equal(helpers.is-value-null(false), false);
    @include assert-equal(helpers.is-value-null(true), false);
    @include assert-equal(helpers.is-value-null(""), false);
    @include assert-equal(helpers.is-value-null(" "), false);
    @include assert-equal(helpers.is-value-null(0), false);
    @include assert-equal(helpers.is-value-null(1), false);
    @include assert-equal(helpers.is-value-null(()), false);
    @include assert-equal(helpers.is-value-null([]), false);
  }

  @include it("is-value-not-null() returns true, if given value is not a null") {
    @include assert-equal(helpers.is-value-not-null(false), true);
    @include assert-equal(helpers.is-value-not-null(true), true);
    @include assert-equal(helpers.is-value-not-null(""), true);
    @include assert-equal(helpers.is-value-not-null(" "), true);
    @include assert-equal(helpers.is-value-not-null(0), true);
    @include assert-equal(helpers.is-value-not-null(1), true);
    @include assert-equal(helpers.is-value-not-null(()), true);
    @include assert-equal(helpers.is-value-not-null([]), true);

    /// non-truthy:
    @include assert-equal(helpers.is-value-not-null(null), false);
  }

  @include it("is-value-map() returns true, if given value is a map") {
    @include assert-equal(
      helpers.is-value-map(
        (
          a: 1,
        )
      ),
      true
    );
    @include assert-equal(helpers.is-value-map(helpers.create-empty-map()), true);

    /// non-truthy:
    @include assert-equal(helpers.is-value-map(null), false);
    @include assert-equal(helpers.is-value-map(false), false);
    @include assert-equal(helpers.is-value-map(true), false);
    @include assert-equal(helpers.is-value-map(""), false);
    @include assert-equal(helpers.is-value-map(" "), false);
    @include assert-equal(helpers.is-value-map(0), false);
    @include assert-equal(helpers.is-value-map(1), false);
    @include assert-equal(helpers.is-value-map(()), false); /// empty map is a list
    @include assert-equal(helpers.is-value-map([]), false);
  }

  @include it("is-value-list() returns true, if given value is a list") {
    @include assert-equal(helpers.is-value-list(()), true); /// empty map is a list
    $list: 1, 2, 3;
    @include assert-equal(helpers.is-value-list($list), true);
    $list2: "1" "2" "3";
    @include assert-equal(helpers.is-value-list($list2), true);
    @include assert-equal(helpers.is-value-list([]), true);

    /// non-truthy:
    @include assert-equal(helpers.is-value-list(null), false);
    @include assert-equal(helpers.is-value-list(false), false);
    @include assert-equal(helpers.is-value-list(true), false);
    @include assert-equal(helpers.is-value-list(""), false);
    @include assert-equal(helpers.is-value-list(" "), false);
    @include assert-equal(helpers.is-value-list(0), false);
    @include assert-equal(helpers.is-value-list(1), false);
    @include assert-equal(
      helpers.is-value-list(
        (
          a: 1,
        )
      ),
      false
    );
    @include assert-equal(helpers.is-value-list((false)), false);
  }

  @include it("is-value-false() returns true, if given value is boolean false") {
    @include assert-equal(helpers.is-value-false(false), true);

    // non-falsy:
    @include assert-equal(helpers.is-value-false(""), false);
    @include assert-equal(helpers.is-value-false(null), false);
    @include assert-equal(helpers.is-value-false(0), false);
    @include assert-equal(helpers.is-value-false(1), false);
    @include assert-equal(helpers.is-value-false(" "), false);
    @include assert-equal(helpers.is-value-false(()), false);
    @include assert-equal(helpers.is-value-false([]), false);
    @include assert-equal(helpers.is-value-false(true), false);
    @include assert-equal(helpers.is-value-false(notquoted), false);
  }

  @include it("is-value-true() returns true, if given value is boolean true") {
    @include assert-equal(helpers.is-value-true(true), true);

    /// non-truthy:
    @include assert-equal(helpers.is-value-true(false), false);
    @include assert-equal(helpers.is-value-true(""), false);
    @include assert-equal(helpers.is-value-true(null), false);
    @include assert-equal(helpers.is-value-true(0), false);
    @include assert-equal(helpers.is-value-true(1), false);
    @include assert-equal(helpers.is-value-true(" "), false);
    @include assert-equal(helpers.is-value-true(()), false);
    @include assert-equal(helpers.is-value-true([]), false);
    @include assert-equal(helpers.is-value-true(notquoted), false);
  }
}
