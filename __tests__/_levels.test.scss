@use "sass-true" as *;
@use "../_levels" as levels;
@use "../_level-utils" as levelsUtils;
@use "../globals" as globals;
@use "../rules" as rules;
@use "sass:map";
@use "sass:meta";
@use "sass:list";

$ruleMap: rules.rules-to-map(
  (
    "modifiers": true,
    "elements": true,
    "extras": true,
  )
);
$config: ();

@function create-default-parent($extraProps: null) {
  $parent: (
    "depth": 1,
    "contentOnly": false,
    "isAllowed": true,
    "type": "block",
    "name": "parent",
    "selector": ".parent",
  );
  @if $extraProps {
    @return map.merge($parent, $extraProps);
  }
  @return $parent;
}

@function create-default-level($extraProps: null) {
  $level: (
    "parent": create-default-parent(),
    "type": "block",
    "depth": 2,
    "name": "test-block",
  );
  @if $extraProps {
    @return map.merge($level, $extraProps);
  }
  @return $level;
}

// test helpers to check is-level-x functions
@function testIsLevelFn($targetType, $fn, $types) {
  $len: list.length($types);
  $errors: [];

  @for $i from 1 through $len - 1 {
    $type: list.nth($types, $i);
    $result: meta.call(
      $fn,
      (
        type: $type,
      )
    );

    @if ($targetType == $type and $result == false) {
      $errors: list.append($errors, "Error: The check for '#{$targetType}' returned wrong result. Should be true");
    }
    @if ($targetType != $type and $result == true) {
      $errors: list.append(
        $errors,
        "Error: The check for '#{$targetType}' returned wrong result with '#{$type}'. Should be false "
      );
    }
  }

  @return $errors;
}
// test helpers to check is-x-type functions
@function testIsTypeFn($targetType, $fn, $types) {
  $len: list.length($types);
  $errors: [];

  @for $i from 1 through $len - 1 {
    $type: list.nth($types, $i);
    $result: meta.call($fn, $type);

    @if ($targetType == $type and $result == false) {
      $errors: list.append($errors, "Error: The check for '#{$targetType}' returned wrong result. Should be true");
    }
    @if ($targetType != $type and $result == true) {
      $errors: list.append(
        $errors,
        "Error: The check for '#{$targetType}' returned wrong result with '#{$type}'. Should be false "
      );
    }
  }

  @return $errors;
}

@include describe("Levels Functions") {
  @include it("init-levels returns an empty list") {
    @include assert-equal(levels.init-levels(), []);
  }
  @include describe("create-level-data() returns level with correct props") {
    $commonArgs: (
      "block": "test-block",
    );
    @include it("works with no parent") {
      $result: levels.create-level-data(null, $commonArgs);

      @include assert-equal(
        $result,
        (
          "parent": null,
          "type": "block",
          "depth": 0,
          "name": "test-block",
        )
      );
    }
    @include it("works with parent and depth is parent depth + 1") {
      $parent: (
        "depth": 100,
        "contentOnly": false,
      );

      $result: levels.create-level-data($parent, $commonArgs);

      @include assert-equal(
        $result,
        (
          "parent": $parent,
          "type": "block",
          "depth": 101,
          "name": "test-block",
        )
      );
    }
    @include it("if parent is content only, depth is parent depth") {
      $parent: (
        "depth": 1,
        "contentOnly": true,
      );
      $result: levels.create-level-data($parent, $commonArgs);

      @include assert-equal(
        $result,
        (
          "parent": $parent,
          "type": "block",
          "depth": 1,
          "name": "test-block",
        )
      );
    }

    @include it("if entity does not exist, nullish level is returned") {
      $parent: (
        "depth": 1,
        "contentOnly": true,
      );
      $result: levels.create-level-data($parent, ());

      @include assert-equal(
        $result,
        (
          "depth": -1,
          "type": null,
          "name": null,
          "parent": null,
        )
      );
    }

    @include it("entity props can be anything and value is stored") {
      $parent: (
        "depth": 1,
        "contentOnly": true,
      );
      $result: levels.create-level-data(
        $parent,
        (
          "any": "value",
        )
      );

      @include assert-equal(
        $result,
        (
          "parent": $parent,
          "type": "any",
          "depth": 1,
          "name": "value",
        )
      );
    }
  }

  @include describe("append-level-rules() sets correct properties to given level") {
    @include it("level.isAllowed is true if parent is allowed and level is allowed in rules") {
      $result: levels.append-level-rules($ruleMap, $config, create-default-level());
      @include assert-equal(map.get($result, "isAllowed"), true);
    }
    @include it("level.isAllowed is false if parent is not allowed") {
      $result: levels.append-level-rules(
        $ruleMap,
        $config,
        create-default-level(
          (
            parent:
              create-default-parent(
                (
                  isAllowed: false,
                )
              ),
          )
        )
      );
      @include assert-equal(map.get($result, "isAllowed"), false);
    }
    @include it("level.isAllowed is false if entity is not allowed in rules") {
      $result: levels.append-level-rules(
        (
          "modifiers": (
            "modifier": false,
          ),
        ),
        $config,
        create-default-level(
          (
            type: "modifier",
            name: "modifier",
          )
        )
      );
      @include assert-equal(map.get($result, "isAllowed"), false);
    }

    @include it("level.contentOnly is false (default) unless type is 'extra' or 'content' AND isAllowed is true") {
      $result: levels.append-level-rules($ruleMap, $config, create-default-level());
      @include assert-equal(map.get($result, "contentOnly"), false);

      $result: levels.append-level-rules(
        $ruleMap,
        $config,
        create-default-level(
          (
            type: "content",
          )
        )
      );
      @include assert-equal(map.get($result, "contentOnly"), true);

      $result: levels.append-level-rules(
        $ruleMap,
        $config,
        create-default-level(
          (
            type: "extra",
          )
        )
      );
      @include assert-equal(map.get($result, "contentOnly"), true);

      $result: levels.append-level-rules(
        (
          "extras": (
            "extra": false,
          ),
        ),
        $config,
        create-default-level(
          (
            type: "extra",
            name: "extra",
          )
        )
      );
      @include assert-equal(map.get($result, "contentOnly"), false);
    }
    @include it(
      "level.contentOnly is true if config.emitContentOnly is set to all and level.emitTarget is set to root"
    ) {
      $result: levels.append-level-rules($ruleMap, $config, create-default-level());
      @include assert-equal(map.get($result, "contentOnly"), false);
      @include assert-equal(map.get($result, "emitTarget"), null);

      $result: levels.append-level-rules(
        $ruleMap,
        (
          emitContentOnly: globals.$EMIT_CONTENT_ONLY_ALL,
        ),
        create-default-level()
      );
      @include assert-equal(map.get($result, "contentOnly"), true);
      @include assert-equal(map.get($result, "emitTarget"), levelsUtils.$EMIT_TARGET_ROOT);
    }
    @include it(
      "level.contentOnly is true if config.emitContentOnly is set to root and level is root  and level.emitTarget is set to root"
    ) {
      $result: levels.append-level-rules(
        $ruleMap,
        (
          emitContentOnly: globals.$EMIT_CONTENT_ONLY_IN_ROOT,
        ),
        create-default-level(
          (
            depth: 1,
            parent: null,
          )
        )
      );
      @include assert-equal(map.get($result, "contentOnly"), true);
      @include assert-equal(map.get($result, "emitTarget"), levelsUtils.$EMIT_TARGET_ROOT);
      $result: levels.append-level-rules(
        $ruleMap,
        (
          emitContentOnly: globals.$EMIT_CONTENT_ONLY_IN_ROOT,
        ),
        create-default-level()
      );
      // false when level is not root
      @include assert-equal(map.get($result, "contentOnly"), false);
    }
    @include it(
      "level.emitTarget is set to nested if level is root and type is block and config.emitContentOnly is set to root"
    ) {
      $result: levels.append-level-rules(
        $ruleMap,
        $config,
        create-default-level(
          (
            depth: 1,
            parent: null,
          )
        )
      );
      @include assert-equal(map.get($result, "emitTarget"), levelsUtils.$EMIT_TARGET_NESTED);

      $result: levels.append-level-rules($ruleMap, $config, create-default-level());
      @include assert-equal(map.get($result, "emitTarget"), null);

      $result: levels.append-level-rules(
        $ruleMap,
        $config,
        create-default-level(
          (
            depth: 1,
            parent: null,
            type: "element",
          )
        )
      );
      @include assert-equal(map.get($result, "emitTarget"), null);
    }

    @include it("level.selector is defined when allowed and not only for content") {
      $result: levels.append-level-rules(
        $ruleMap,
        (
          "modifierDelimeter": "...",
        ),
        create-default-level(
          (
            type: "modifier",
            name: "modifier",
          )
        )
      );
      @include assert-equal(map.get($result, "selector"), "...modifier");
    }
    @include it("level.selector is parent selector when allowed and it is type extra") {
      $result: levels.append-level-rules(
        $ruleMap,
        $config,
        create-default-level(
          (
            type: "extra",
            name: "extra",
          )
        )
      );
      @include assert-equal(map.get($result, "selector"), ".parent");
    }
    @include it("level.selector is null if entity is not allowed in rules") {
      $result: levels.append-level-rules(
        (
          "modifiers": (
            "modifier": false,
          ),
        ),
        $config,
        create-default-level(
          (
            type: "modifier",
            name: "modifier",
          )
        )
      );
      @include assert-equal(map.get($result, "selector"), null);
    }
  }

  @include it("create-level() creates level and calls create-level-data() and append-level-rules()") {
    // SCSS makes passing arbitrary arguments to a function difficult.
    // We can't pass a map as an argument, so we have to pass a list and convert it to a map.
    $entityArgs: (
      "block": "test-block",
    );

    $result: levels.create-level($ruleMap, $config, create-default-parent(), $entityArgs);

    @include assert-equal(map.get($result, "type"), "block");
    @include assert-equal(map.get($result, "name"), "test-block");
    @include assert-equal(map.get($result, "selector"), ".test-block");
    @include assert-equal(map.get($result, "emitTarget"), null);
    @include assert-equal(map.get($result, "isAllowed"), true);
    @include assert-equal(map.get($result, "contentOnly"), false);
  }
}
