@use "../helpers";
@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:math";

/// Small utils to compare maps and lists

/// Note: tested keys are from "expected" so partials can be tested.

@function diff-map($target, $expected, $diffs: []) {
  @each $key in map.keys($expected) {
    $value: map.get($target, $key);
    $expectedValue: map.get($expected, $key);

    @if helpers.is-value-map($expectedValue) {
      @if not helpers.is-value-map($value) {
        $diffs: list.append($diffs, 'expected "#{$key}" to be a map, but got "#{meta.inspect($value)}"');
      } @else {
        $diffs: diff-map($value, $expectedValue, $diffs);
      }
    } @else {
      @if $value != $expectedValue {
        $diffs: list.append($diffs, 'expected "#{$key}" to be "#{$expectedValue}", but got "#{meta.inspect($value)}"');
      }
    }
  }

  @return $diffs;
}

/// Note: tested items are from "expected" so partials can be tested.

@function diff-list($target, $expected, $diffs: []) {
  $lenExpected: list.length($expected);
  $lenTarget: list.length($target);
  $len: math.min($lenTarget, $lenExpected);
  @if $len > 1 {
    @for $i from 1 through $len {
      $value: list.nth($target, $i);
      $expectedValue: list.nth($expected, $i);
      @if helpers.is-value-list($expectedValue) {
        @if not helpers.is-value-list($value) {
          $diffs: list.append($diffs, 'expected "#{$i}" to be a list, but got "#{meta.inspect($value)}"');
        } @else {
          $diffs: diff-map($value, $expectedValue, $diffs);
        }
      } @else {
        @if $value != $expectedValue {
          $diffs: list.append($diffs, 'expected "#{$i}" to be "#{$expectedValue}", but got "#{meta.inspect($value)}"');
        }
      }
    }
  }
  @if $lenExpected > $lenTarget {
    $diffs: list.append($diffs, "expected list is longer #{$lenExpected} than target #{$lenTarget}.");
  }
  @return $diffs;
}
