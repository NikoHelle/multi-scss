@use "sass-true" as *;
// using index so that we can test the whole process and no need to test it separately
@use "../index" as *;
@mixin testSCSS($modifiers: true) {
  @include multi-sass($modifiers: $modifiers, $elements: true, $extras: true, $block: "block-name") {
    div.class {
      --div-class: var(--var-div-class);
      @include modifier("mod1") {
        --mod1: var(--var-mod1);

        div {
          --mod1-div: var(--var-mod1-div);
        }
      }

      span {
        --div-span: var(--var-div-span);
      }
    }

    @include block {
      @include modifier("mod2") {
        --mod2: var(--var-mod2);

        @include modifier("mod2-inner-mod") {
          --mod2-inner-mod: var(--var-mod2-inner-mod);

          div {
            --mod2-inner-mod-div: var(--var-mod2-inner-mod-div);
          }
        }

        ul {
          li.class {
            @include modifier("li-mod") {
              --ul-li-li-mod: var(--var-ul-li-li-mod);

              a.class {
                --ul-li-li-mod-a: var(--var-ul-li-li-mod-a);

                @include modifier("a-mod") {
                  --ul-li-li-mod-a-a-mod: var(--ul-li-li-mod-a-a-mod);

                  span {
                    --ul-li-li-mod-a-a-mod-span: var(--ul-li-li-mod-a-a-mod-span);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

@include describe("Modifier entities") {
  @include it("are all outputted when $modifiers is true.") {
    @include assert {
      @include output {
        @include testSCSS;
      }

      @include expect {
        div.class {
          --div-class: var(--var-div-class);
        }

        div.class--mod1 {
          --mod1: var(--var-mod1);
        }

        div.class--mod1 div {
          --mod1-div: var(--var-mod1-div);
        }

        div.class span {
          --div-span: var(--var-div-span);
        }

        .block-name--mod2 {
          --mod2: var(--var-mod2);
        }

        .block-name--mod2--mod2-inner-mod {
          --mod2-inner-mod: var(--var-mod2-inner-mod);
        }

        .block-name--mod2--mod2-inner-mod div {
          --mod2-inner-mod-div: var(--var-mod2-inner-mod-div);
        }

        .block-name--mod2 ul li.class--li-mod {
          --ul-li-li-mod: var(--var-ul-li-li-mod);
        }

        .block-name--mod2 ul li.class--li-mod a.class {
          --ul-li-li-mod-a: var(--var-ul-li-li-mod-a);
        }

        .block-name--mod2 ul li.class--li-mod a.class--a-mod {
          --ul-li-li-mod-a-a-mod: var(--ul-li-li-mod-a-a-mod);
        }

        .block-name--mod2 ul li.class--li-mod a.class--a-mod span {
          --ul-li-li-mod-a-a-mod-span: var(--ul-li-li-mod-a-a-mod-span);
        }
      }
    }
  }
  @include describe("Output is controlled with the modifiers parameter") {
    @include it("No modifiers are outputted when $modifiers is false.") {
      @include assert {
        @include output {
          @include testSCSS(false);
        }

        @include expect {
          div.class {
            --div-class: var(--var-div-class);
          }
          div.class span {
            --div-span: var(--var-div-span);
          }
        }
      }
    }
    @include it("Some modifiers are outputted when $modifiers is a map of modifier names to booleans.") {
      @include assert {
        @include output {
          @include testSCSS(
            (
              "mod1": false,
              "li-mod": false,
            )
          );
        }

        @include expect {
          div.class {
            --div-class: var(--var-div-class);
          }

          div.class span {
            --div-span: var(--var-div-span);
          }

          .block-name--mod2 {
            --mod2: var(--var-mod2);
          }

          .block-name--mod2--mod2-inner-mod {
            --mod2-inner-mod: var(--var-mod2-inner-mod);
          }

          .block-name--mod2--mod2-inner-mod div {
            --mod2-inner-mod-div: var(--var-mod2-inner-mod-div);
          }
        }
      }
    }
    @include it("String value allows only given modifier to be outputted.") {
      @include assert {
        @include output {
          @include testSCSS("mod2");
        }

        @include expect {
          div.class {
            --div-class: var(--var-div-class);
          }
          div.class span {
            --div-span: var(--var-div-span);
          }

          .block-name--mod2 {
            --mod2: var(--var-mod2);
          }
        }
      }
    }
  }
}
