@use "sass-true" as *;
@use "sass:list";
@use "sass:meta";
@use "sass:map";
@use "../index" as *;

@mixin testMixin($elements: true, $modifiers: true, $extras: true) {
  @include multi-sass($modifiers: $modifiers, $elements: $elements, $extras: $extras, $block: "test") {
    @include block {
      --always-emitted-block-content: var(--var-always-emitted-block-content);

      @include if-content-allowed {
        --block-content: var(--var-block-content-allowed);
      }

      @include content("content2") {
        --block-content2: var(--var-block-content2-allowed);
      }

      @include element("elem1") {
        --elem1-content: var(--var-elem1-content);

        @include content("content2") {
          --elem1-content2: var(--var-elem1-content2);
        }
      }

      @include modifier("abc") {
        --always-emitted-abc-content: var(--var-always-emitted-abc-content);

        @include if-content-allowed {
          --modifier-abc-content: var(--var-modifier-abc-content-allowed);
        }

        @include element("elem1") {
          --abc-elem1-content: var(--var-abc-elem1-content);

          @include content("content2") {
            --abc-elem1-content2: var(--var-abc-elem1-content2);
          }
        }
      }
    }
  }
}

@include describe("if-content-allowed() is shorthand for content entities with name 'base'") {
  @include it("If base element is not allowed, the content is not emitted") {
    @include assert {
      @include output {
        @include testMixin(
          $elements: (
            "base": false,
            "content2": false,
            "elem1": false,
          ),
          $modifiers: (
            "abc": (
              "base": false,
              "content2": false,
              "elem1": false,
            ),
          )
        );
      }

      @include expect {
        .test {
          --always-emitted-block-content: var(--var-always-emitted-block-content);
        }

        .test--abc {
          --always-emitted-abc-content: var(--var-always-emitted-abc-content);
        }
      }
    }
  }
  @include it("If base element is allowed, the content is emitted") {
    @include assert {
      @include output {
        @include testMixin(
          $elements: (
            "base": true,
            "content2": false,
            "elem1": false,
          ),
          $modifiers: (
            "abc": (
              "base": true,
              "content2": false,
              "elem1": false,
            ),
          )
        );
      }

      @include expect {
        .test {
          --always-emitted-block-content: var(--var-always-emitted-block-content);
          --block-content: var(--var-block-content-allowed);
        }

        .test--abc {
          --always-emitted-abc-content: var(--var-always-emitted-abc-content);
          --modifier-abc-content: var(--var-modifier-abc-content-allowed);
        }
      }
    }
  }
  @include it("If modifier's base element is not allowed, the content is not emitted") {
    @include assert {
      @include output {
        @include testMixin(
          $elements: (
            "base": true,
            "content2": false,
            "elem1": false,
          ),
          $modifiers: (
            "abc": (
              "base": false,
              "content2": false,
              "elem1": false,
            ),
          )
        );
      }

      @include expect {
        .test {
          --always-emitted-block-content: var(--var-always-emitted-block-content);
          --block-content: var(--var-block-content-allowed);
        }

        .test--abc {
          --always-emitted-abc-content: var(--var-always-emitted-abc-content);
        }
      }
    }
  }
}
