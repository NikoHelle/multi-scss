@use "sass:map";
@use "sass:meta";
@use "./globals.scss" as globals;
@use "./helpers.scss" as helpers;
@use "./rules.scss" as rules;
@use "./selector-funcs.scss" as selectorFuncs;
@use "./level-utils.scss" as levelUtils;

/// Functions to create and update levels and handle their nesting.

@function init-levels() {
  $levels: [];

  @return $levels;
}

@function create-level-data($parent, $args...) {
  $parentDepth: if($parent, map.get($parent, "depth"), -1);
  $parentIsContentOnly: if($parent, map.get($parent, "contentOnly"), false);
  $depth: if($parentIsContentOnly, $parentDepth, $parentDepth + 1);
  $levelProps: helpers.get-map-data-with-value(helpers.get-arg-map-or-arg-list-as-map($args...));

  @if not $levelProps {
    @return ("depth": -1, "type": null, "name": null, "parent": null);
  }

  $type: map.get($levelProps, "key");
  $name: map.get($levelProps, "value");

  @return ("parent": $parent, "type": $type, "depth": $depth, "name": $name);
}

@function append-level-rules($ruleMap, $config, $level) {
  $parent: map.get($level, "parent");
  $parentAllowed: if($parent, map.get($parent, "isAllowed"), true);
  $isAllowed: $parentAllowed and levelUtils.is-level-allowed-in-rules($ruleMap, $level);
  $contentOnly: $isAllowed and levelUtils.is-level-content-only($level);
  $selector: null;
  $isRoot: levelUtils.is-root-level($level);
  $emitToRootInConfig: (
    ($isRoot and globals.emit-content-only-in-root($config)) or globals.emit-content-only-all($config)
  );

  /// Only block and custom entities should nest their selectors in root.
  @if $emitToRootInConfig {
    $level: levelUtils.set-level-emit-target-to-root($level);
    $contentOnly: true;
  } @else if $isRoot and (levelUtils.is-block-level($level)) {
    $level: levelUtils.set-level-emit-target-to-nested($level);
  }

  $level: map.set($level, "isAllowed", $isAllowed);
  $level: map.set($level, "contentOnly", $contentOnly);

  @if $isAllowed and not $contentOnly {
    $selector: selectorFuncs.create-level-selector($level, $config);
  } @else if $isAllowed and levelUtils.is-extra-level($level) and $parent {
    $selector: levelUtils.get-level-selector($parent);
  }

  $level: map.set($level, "selector", $selector);

  @return $level;
}

@function create-level($ruleMap, $config, $args...) {
  $level: create-level-data($args...);

  @return append-level-rules($ruleMap, $config, $level);
}
