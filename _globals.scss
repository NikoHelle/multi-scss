@use "sass:map";
@use "sass:list";
@use "./helpers";

/// Global variables

/// Controls, parses and sets the global properties and controllers.
/// Each mixing that calls the init-multi-sass creates a new controller.
/// Multiple controllers are needed so nesting "init-multi-sass" inside another "init-multi-sass" works.
/// Each controller needs their own config and tracking of levels.

/// List of controllers initialized from init-multi-sass
$CONTROLLER_LIST: [];

/// Constants
$HAS_EXPLICIT_TRUE: "HAS_EXPLICIT_TRUE";
$ALL_ALLOWED: "ALL_ALLOWED";
$ALL_DISALLOWED: "ALL_DISALLOWED";
$ALLOW_BASE_CONTENT: "ALLOW_BASE_CONTENT";
$BASE_CONTENT_NAME: "base";
$ELEMENT-DELIMETER: "__";
$MODIFIER-DELIMETER: "--";
$BLOCK-PREFIX: "";
$EMIT_CONTENT_ONLY_IN_ROOT: "root";
$EMIT_CONTENT_ONLY_ALL: "all";

/// Global CONTROLLER_LIST functions

/// Returs the global list of controllers

@function get-controllers() {
  @return $CONTROLLER_LIST;
}

/// Update global list and return updated list

@function update-controllers($controllerList) {
  /* stylelint-disable-next-line scss/dollar-variable-pattern */
  $CONTROLLER_LIST: $controllerList !global;

  @return $CONTROLLER_LIST;
}

/// Adds a new controller to the global list and returns updated list

@function add-controller($controller) {
  $current: get-controllers();
  $updated: list.append($current, $controller);
  @return update-controllers($updated);
}

/// Removes current controller (pops the list)from the global list and returns updated list

@function remove-current-controller() {
  $controllers: get-controllers();
  $newList: helpers.pop-list($controllers);

  @return update-controllers($newList);
}

/// Gets current controller, the last in the list

@function get-current-controller() {
  @return helpers.get-last-list-item(get-controllers());
}

/// Updates current controller

@function update-current-controller($ruleMap: null, $levels: null, $config: null) {
  $currentController: get-current-controller();

  @if $ruleMap {
    $currentController: map.set($currentController, "rules", $ruleMap);
  }

  @if $levels {
    $currentController: map.set($currentController, "levels", $levels);
  }

  @if $config {
    $currentController: map.set($currentController, "config", $config);
  }

  $currentIndex: list.length(get-controllers());
  $newControllerList: helpers.replace-list-item(get-controllers(), $currentController, $currentIndex);
  $void: update-controllers($newControllerList);

  @return $currentController;
}

/// Creates a new controller from given data and stores a new controller

@function store-multi-sass-controller($ruleMap, $levels, $config) {
  $newController: (
    "rules": $ruleMap,
    "levels": $levels,
    "config": $config,
  );
  $void: add-controller($newController);

  @return $newController;
}

/// Current controller rule related functions

/// Updates the rules of the current controller

@function update-multi-sass-rules($ruleMap) {
  @return update-current-controller($ruleMap: $ruleMap);
}

/// Returns the rules of the current controller

@function get-multi-sass-rules() {
  $currentController: get-current-controller();
  @if not $currentController {
    @return helpers.create-empty-map();
  }
  @return map.get($currentController, "rules");
}

/// Current controller level functions

/// Returns the current list of levels

@function get-multi-sass-levels() {
  $currentController: get-current-controller();
  @if not $currentController {
    @return [];
  }
  @return map.get($currentController, "levels");
}

/// Updates the levels of the current controller

@function update-multi-sass-levels($levels) {
  @return update-current-controller($levels: $levels);
}

/// Removes the current level of the current controller

@function remove-current-multi-sass-level() {
  $levels: get-multi-sass-levels();
  $newList: helpers.pop-list($levels);

  @return update-multi-sass-levels($newList);
}

/// Adds a new level to the current controller

@function add-multi-sass-level($level) {
  $current: get-multi-sass-levels();
  $updated: list.append($current, $level);
  $void: update-multi-sass-levels($updated);

  @return $updated;
}

/// Replaces a level of the current controller
/// Returns thee current list of levels

@function replace-multi-sass-level($replacee, $index) {
  $newLevels: helpers.replace-list-item(get-multi-sass-levels(), $replacee, $index);
  $void: update-multi-sass-levels($newLevels);

  @return $newLevels;
}

/// Updates current (last) level of the current controller
/// Returns thee current list of levels

@function update-current-multi-sass-level($newProps) {
  $levels: get-multi-sass-levels();
  $len: list.length($levels);
  @if $len == 0 {
    @return $levels;
  }

  $level: helpers.get-last-list-item($levels);
  $updatedLevel: map.merge($level, $newProps);
  @return replace-multi-sass-level($updatedLevel, $len);
}

/// Current controller config functions

/// Returns config the current controller

@function get-multi-sass-config() {
  @return map.get(get-current-controller(), "config");
}

/// Returns a value from the config of the current controller

@function get-config-value($value, $config: null) {
  $config: $config or get-multi-sass-config();

  @return map.get($config, $value);
}

/// Returns the "blockPrefix" from the config of the current controller

@function get-block-prefix($config: null) {
  @return get-config-value("blockPrefix", $config);
}

/// Returns the "blockName" from the config of the current controller

@function get-block-name($config: null) {
  @return get-config-value("blockName", $config);
}

/// Returns the "modifierDelimeter" from the config of the current controller

@function get-modifier-delimeter($config: null) {
  @return get-config-value("modifierDelimeter", $config);
}

/// Returns the "elementDelimeter" from the config of the current controller

@function get-element-delimeter($config: null) {
  @return get-config-value("elementDelimeter", $config);
}

/// Returns the "createBlockSelector" from the config of the current controller

@function get-block-selector-creator($config: null) {
  @return get-config-value("createBlockSelector", $config);
}

/// Returns the "createModifierSelector" from the config of the current controller

@function get-modifier-selector-creator($config: null) {
  @return get-config-value("createModifierSelector", $config);
}

/// Returns The "createElementSelector" from the config of the current controller

@function get-element-selector-creator($config: null) {
  @return get-config-value("createElementSelector", $config);
}

/// Returns The "selectorMiddleware" from the config of the current controller

@function get-selector-middleware($config: null) {
  @return get-config-value("selectorMiddleware", $config);
}

/// Returns The "info" from the config of the current controller

@function get-info($config: null) {
  @return get-config-value("info", $config);
}

/// Returns The a value from the "info" or null

@function get-info-value($name, $config: null) {
  $info: get-info($config);
  @return helpers.get-map-value-if-map($info, $name);
}

/// Returns true if the given name matches the BASE_CONTENT_NAME ("base")

@function is-base-name($name) {
  @return $name == $BASE_CONTENT_NAME;
}

/// Returns true if config.emitContentOnly is set to emit only contents of the root (level 0)

@function emit-content-only-in-root($config: null) {
  @return get-config-value("emitContentOnly", $config) == $EMIT_CONTENT_ONLY_IN_ROOT;
}

/// Returns true if config.emitContentOnly is set to emit all rules without selectors

@function emit-content-only-all($config: null) {
  @return get-config-value("emitContentOnly", $config) == $EMIT_CONTENT_ONLY_ALL;
}
