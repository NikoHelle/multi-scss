@use "sass:map";
@use "sass:meta";
@use "./globals.scss" as globals;
@use "./process.scss" as process;
@use "./level-utils.scss" as levelUtils;
@use "./output.scss" as output;
@use "./core-entities.scss" as coreEntities;

/// Calls given func and emits the selector with content
@mixin create-custom-selector($selectorCreator) {
  $ruleMap: globals.get-multi-sass-rules();
  $config: globals.get-multi-sass-config();
  $currentLevel: process.get-current-level();
  $selector: meta.call($selectorCreator, $ruleMap, $config, $currentLevel);

  @if $selector {
    @include coreEntities.custom($selector) {
      @content;
    }
  }
}

/// Mixin for creating custom levels which are useful for custom css selectors
/// Calls given func and appends the level and emits the content
@mixin create-custom-level($levelCreator) {
  $ruleMap: globals.get-multi-sass-rules();
  $config: globals.get-multi-sass-config();
  $currentLevel: process.get-current-level();
  $newLevel: meta.call($levelCreator, $ruleMap, $config, $currentLevel);
  $selector: levelUtils.get-level-selector($newLevel);

  @if $newLevel and $selector {
    $parentDepth: if($currentLevel, levelUtils.get-level-depth($currentLevel), 0);
    $newLevel: levelUtils.set-level-parent($newLevel, $currentLevel);
    $newLevel: levelUtils.set-level-depth($newLevel, $parentDepth + 1);
    $void: globals.add-multi-sass-level($newLevel);

    @include output.emit($newLevel) {
      @content;
    }

    $void: process.end();

    @include coreEntities.custom($selector) {
      @content;
    }
  }
}
